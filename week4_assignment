# week 4
# Weather Observation 8 

Task 1 :- Weather Observation Station 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:
Field        Type
ID           NUMBER
CITY         VARCHAR2(17)
STATE        VARCHAR2(3)
LAT_N        NUMBER
LONG_W       NUMBER

Query
select distinct city from station where city like '[aeiou]%[aeiou]';

Task 2 :- Population Density Difference
Query the difference between the maximum and minimum populations in CITY.

The CITY table is described as follows:
Field        Type
ID           NUMBER
Name         VARCHAR2(17)
CountryCode  VARCHAR2(3)
DISTRICT     VARCHAR(20)
POPULATION   NUMBER

Query
select max(population) - min(population) from city;

Task 3 :- Weather Observation Station 19
Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits.

The STATION table is described as follows:
Field        Type
ID           NUMBER
CITY         VARCHAR2(17)
STATE        VARCHAR2(3)
LAT_N        NUMBER
LONG_W       NUMBER

Query
select round(sqrt(power(min(lat_n)-max(lat_n),2) + power(min(long_w)-max(long_w),2)),4) from station;

Task 4 :- Weather Observation Station 20
A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places.

The STATION table is described as follows:
Field        Type
ID           NUMBER
CITY         VARCHAR2(17)
STATE        VARCHAR2(3)
LAT_N        NUMBER
LONG_W       NUMBER

Query
with cte as (select *,cast(row_number() over(order by lat_n) as signed) - cast(row_number() over(order by lat_n desc) as signed) diff from station)
select 
round(sum(
CASE 
when diff = 1 or diff = -1 then lat_n 
when diff = 0 then lat_n * 2
end)/2,4) as new_diff from cte;

Task 5 :- African Cities
Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

The CITY tables are described as follows: 
Field        Type
ID           NUMBER
Name         VARCHAR2(17)
CountryCode  VARCHAR2(3)
DISTRICT     VARCHAR(20)
POPULATION   NUMBER

The COUNTRY tables are described as follows: 
Field          Type
CODE           VARCHAR2(3)
NAME           VARCHAR2(44)
CONTINENT      VARCHAR2(13)
REGION         VARCHAR2(25)
SURFACEAREA    NUMBER
INDEPYEAR      VARCHAR(25)
POPULATION     NUMBER
LIFEEXPECTANCY VARCHAR2(4)
GNP            NUMBER
GNPOLD         VARCHAR2(9)
LOCALNAME      VARCHAR2(44)
GOVERNMENTFORM VARCHAR2(44)
HEADOFSTATE    VARCHAR2(32)
CAPITAL        VARCHAR2(4)
CODE2          VARCHAR2(2)

Query
select c.name from city c join country ct on c.CountryCode = ct.Code where ct.continent = 'Africa';

Task 6 :- African Cities
Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

The CITY tables are described as follows: 
Field        Type
ID           NUMBER
Name         VARCHAR2(17)
CountryCode  VARCHAR2(3)
DISTRICT     VARCHAR(20)
POPULATION   NUMBER

The COUNTRY tables are described as follows: 
Field          Type
CODE           VARCHAR2(3)
NAME           VARCHAR2(44)
CONTINENT      VARCHAR2(13)
REGION         VARCHAR2(25)
SURFACEAREA    NUMBER
INDEPYEAR      VARCHAR(25)
POPULATION     NUMBER
LIFEEXPECTANCY VARCHAR2(4)
GNP            NUMBER
GNPOLD         VARCHAR2(9)
LOCALNAME      VARCHAR2(44)
GOVERNMENTFORM VARCHAR2(44)
HEADOFSTATE    VARCHAR2(32)
CAPITAL        VARCHAR2(4)
CODE2          VARCHAR2(2)

Query
select c.name from city c join country ct on c.CountryCode = ct.Code where ct.continent = 'Africa';

Task 7 :- The Report
You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.

Column  Type
ID      Integer
Name    String
Marks   Integer

Grade   Min_Mark   Max_Mark
1        0          9
2        10         19
3        20         29
4        30         39
5        40         49
6        50         59
7        60         69
8        70         79
9        80         89
10       90         100

Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
Write a query to help Eve.

Query
select case when g.grade >= 8 then s.name else NULL end as name , g.grade , s.marks from students s join grades g on s.marks >= g.min_mark and s.marks <=g.max_mark order by g.grade desc, s.name;

Task 8 :- Top Competitors
Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

Hacker Table
Column     Type
hacker_id  Integer
name       String

Difficulty Table
Column             Type
difficulty_level   Integer
score              Integer

Challenges Table
Column           Type
challenge_id     Integer
hacker_id        Integer
difficulty_level Integer

Submissions Table
Column           Type
submission_id    Integer
hacker_id        Integer
challenge_id     Integer
score            Integer

Query
SELECT S.HACKER_ID , H.NAME 
FROM
HACKERS H JOIN SUBMISSIONS S ON H.HACKER_ID = S.HACKER_ID
JOIN
CHALLENGES C ON C.CHALLENGE_ID = S.CHALLENGE_ID
JOIN
DIFFICULTY D ON D.DIFFICULTY_LEVEL = C.DIFFICULTY_LEVEL
WHERE S.SCORE = D.SCORE
GROUP BY S.HACKER_ID,H.NAME HAVING COUNT(S.HACKER_ID)>1
ORDER BY COUNT(S.HACKER_ID) DESC , S.HACKER_ID ASC;

Task 9 :- Ollivander's Inventory
Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

Wands Table
Column        Type
id            Integer
code          Integer
coins_needed  Integer
power         Integer

Wands_Property
Column        Type
code          Integer
age           Integer
is_evil       Integer

Query
select 
w.id , wp.age , w.coins_needed , w.power 
from
wands w join wands_property wp on w.code = wp.code
where wp.is_evil = 0
and w.coins_needed = (
select min(w1.coins_needed) from wands w1 where w.code=w1.code and w.power = w1.power)
order by w.power desc,wp.age desc;

Task 10 :- Contest Leaderboard
You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!

The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of 0 from your result.

Hacker Table
Column     Type
hacker_id  Integer
name       String

Submissions Table
Column           Type
submission_id    Integer
hacker_id        Integer
challenge_id     Integer
score            Integer

Query
select sub.hacker_id,sub.name, sum(score) as total_score from
(select s.hacker_id as hacker_id,h.name as name,challenge_id,max(score) as score from hackers h join submissions s  on h.hacker_id = s.hacker_id where score != 0 group by s.hacker_id,h.name,challenge_id) sub
group by sub.hacker_id , sub.name
order by total_score desc , sub.hacker_id asc;



